[{"content":"Prerequisites: Sign up an OpenRouter account, create an API key, the key format is like:\nsk-or-v1-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx API Base URL: https://openrouter.ai/api/v1 A model ID: deepseek/deepseek-chat-v3-0324:free or microsoft/mai-ds-r1:free Steps Pull the Open WebUI Image 1 docker pull ghcr.io/open-webui/open-webui:main Run a Container 1 docker run -d -p 3000:8080 -v open-webui:/app/backend/data --name open-webui ghcr.io/open-webui/open-webui:main Access Open WebUI Open your browser and go to http://localhost:3000\nSign Up \u0026amp; Sign In Enter random email, username and password to sign up a local account, then sign in.\nAdd a Connection Go to Settings \u0026raquo; Connections \u0026raquo; Add connection, fill in the three required pieces of information you prepared earlier.\nNew Chat Select a model, create a new chat on the top right corner\nEnjoy\n","permalink":"https://ninjatypeman.github.io/posts/free-ds-openrouter/","summary":"Use free DeepSeek on local pc via Open WebUI + OpenRouter","title":"OpenRouter + Open WebUI: Use LLMs for Free "},{"content":" 本文不包含 ibus-rime “美化”，主打能用就行\n安装 ibus-rime 1 sudo dnf install ibus-rime # 安装完成后重新登入 配置 ibus-rime 遇到下面的任何配置步骤不生效时，多尝试重新登入或重启\n添加 Rime Settings \u0026raquo; Keyboard \u0026raquo; Add Input Source \u0026raquo; Chinese \u0026raquo; Chinese(Rime) \u0026raquo; Add\n设置环境变量 1 2 3 4 5 vi ~/.bash_profile # 加入三行内容: export XMODIFIERS=@im=ibus export GTK_IM_MODULE=ibus export QT_IM_MODULE=ibus 解决候选框偏移 参考 Fedora 配置 Rime 中州韵输入法\n如果出现候选框偏移的问题，可以注释或者删掉上面添加的环境变量后面两行\n1 2 3 4 vi ~/.bash_profile export XMODIFIERS=@im=ibus # 仅保留此行 # export GTK_IM_MODULE=ibus # export QT_IM_MODULE=ibus 解决 Flatpak 应用无法输入中文 运行以下命令或者通过 Flatseal 图形界面添加环境变量，重新登入即可正常输入中文，但是部分 Flatpak 应用有候选框偏移的问题，暂时无解\n1 flatpak override --user --all --env=GTK_IM_MODULE=ibus --env=QT_IM_MODULE=ibus --env=XMODIFIERS=@im=ibus 安装 plum（东风破）和雾凇拼音 参考 雾凇拼音\n1 2 3 4 5 6 7 8 9 10 # 安装 plum（东风破） cd ~ git clone https://github.com/rime/plum.git plum # 卸载 plum 只需要删除 ~/plum 文件夹即可 # 安装雾凇拼音 cd ~/plum bash rime-install iDvel/rime-ice:others/recipes/full # 安装或更新全部文件 bash rime-install iDvel/rime-ice:others/recipes/config:schema=flypy ibus restart 小鹤双拼 1 2 # 将方案列表的 schema: double_pinyin_flypy 这行移动到最前面，其他输入方案同理 vi ~/.config/ibus/rime/default.yaml 水平候选框 1 2 3 4 5 6 # 新建 ~/.config/ibus/rime/ibus_rime.custom.yaml vi ~/.config/ibus/rime/ibus_rime.custom.yaml # 添加： patch: \u0026#34;style/horizontal\u0026#34;: true 候选词个数 1 2 vi ~/.config/ibus/rime/default.yaml # page_size: 5 修改为 page_size: 9 关闭候选词拼音提示 1 2 vi ~/.config/ibus/rime/double_pinyin_flypy.schema.yaml spelling_hints: 8 # 注释这行 候选词字号 安装 IBus Tweaker 扩展，使用该扩展可以调整候选词字号\n快捷键 1 2 # 方案选单：F4 # 繁简切换：Ctrl + Shift + 4 ","permalink":"https://ninjatypeman.github.io/posts/ibus-rime-fedora/","summary":"在Fedora Linux 42 (Workstation Edition) 上安装、配置 ibus-rime + 雾凇拼音","title":"Fedora 42 安装、配置 ibus-rime"},{"content":" Use the command line to upgrade from Fedora 41 to Fedora 42, refer to an article on it\u0026rsquo;s FOSS\n1 2 3 sudo dnf upgrade --refresh sudo dnf system-upgrade download --releasever=42 sudo dnf system-upgrade reboot Change Hostname Change the default hostname \u0026lsquo;fedora\u0026rsquo; to what you want.\n1 2 hostnamectl # Check the hostname sudo hostnamectl set-hostname \u0026lt;my-fedora\u0026gt; # Change the hostname Upgrade Packages Append content below to /etc/dnf/dnf.conf\n1 2 3 4 5 # /etc/dnf/dnf.conf fastestmirror=True max_parallel_downloads=16 defaultyes=True keepcache=True Then upgrade packages\n1 sudo dnf upgrade # both update and upgrade work Config Grub Config Grub if you dual-boot Windows and Fedora\n1 2 3 4 5 6 7 # Edit /etc/default/grub, append/change these lines: GRUB_TIMEOUT=30 GRUB_DEFAULT=saved GRUB_SAVEDEFAULT=true sudo -i sudo grub2-mkconfig -o /boot/grub2/grub.cfg Config .bashrc To make your terminal much easier to use, append below content to ~/.bashrc\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 # ~/.bashrc bind \u0026#34;set completion-ignore-case on\u0026#34; export HISTCONTROL=erasedups export HISTIGNORE=\u0026#34;\u0026amp;:h:l:l.:la:ll:ls:cd:pwd:clear:cls:..:...:....\u0026#34; PS1=\u0026#39;\\[\\e[32m\\]\\w\\[\\e[0m\\] \u0026#39; # Aliases alias ..=\u0026#39;cd ..\u0026#39; alias ...=\u0026#39;cd ../..\u0026#39; alias ....=\u0026#39;cd ../../..\u0026#39; alias la=\u0026#39;ls -A\u0026#39; alias l=\u0026#39;ls -CF\u0026#39; alias ll=\u0026#39;ls -alF\u0026#39; alias cls=\u0026#39;clear\u0026#39; alias h=\u0026#39;history\u0026#39; alias hgrep=\u0026#39;history | grep\u0026#39; alias catbrc=\u0026#39;cat ~/.bashrc\u0026#39; alias sobrc=\u0026#39;source ~/.bashrc\u0026#39; alias fuck=\u0026#39;sudo $(fc -ln -1)\u0026#39; alias vim=\u0026#39;nvim\u0026#39; alias vibrc=\u0026#39;nvim ~/.bashrc\u0026#39; alias extar=\u0026#39;tar -xzvf\u0026#39; alias sdupg=\u0026#39;sudo dnf upgrade\u0026#39; # Logout, Reboot, Suspend, Poweroff alias lgout=\u0026#39;gnome-session-quit --logout --no-prompt\u0026#39; alias reboot=\u0026#39;systemctl reboot\u0026#39; alias ssp=\u0026#39;systemctl suspend\u0026#39; alias pwoff=\u0026#39;systemctl poweroff\u0026#39; Apply changes and reload\n1 source ~/.bashrc Enable RPM Fusion Refer to RPM Fusion Configuration\n1 sudo dnf install https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm The dnf Command Some dnf commands\n1 2 3 4 5 6 dnf check-update dnf search \u0026lt;pkg-name\u0026gt; dnf repoquery \u0026lt;pkg-name\u0026gt; dnf info \u0026lt;pkg-name\u0026gt; dnf remove \u0026lt;pkg-name\u0026gt; dnf autoremove Screen Brightness Use ddcutil to adjust brightness of your screen, you can install a Gnome extension call \u0026ldquo;Brightness Control using DDC/C\u0026rdquo; to adjust by keyboard shortcut or mouse.\n1 2 3 sudo dnf install ddcutil sudo ddcutil detect sudo ddcutil setvcp 10 \u0026lt;value\u0026gt; # Adjust brightness via command Install a Nerd Font Download a Nerd Font, AdwaitaMono Nerd Font, for instance\n1 2 3 4 5 6 7 sudo mkdir -p /usr/share/fonts/nerd-fonts # Create this folder if not exist cd /usr/share/fonts/nerd-fonts # Enter this folder sudo wget https://github.com/ryanoasis/nerd-fonts/releases/download/v3.4.0/AdwaitaMono.zip # Download the AdwaitaMono Nerd Font sudo unzip AdwaitaMono.zip -d AdwaitaMono # Unzip fc-cache -fv # Rebuild the entire font cache fc-list | grep \u0026#34;AdwaitaMono\u0026#34; # Check if AdwaitaMono Nerd Font installed sudo rm AdwaitaMono.zip # Delete the .zip file ","permalink":"https://ninjatypeman.github.io/posts/fedora42-todo/","summary":"Things to do after installing Fedora Workstation 42","title":"Things to do after installing Fedora 42"},{"content":"检查 openssh 是否已安装 1 2 3 dnf list installed openssh which ssh # 输出 /usr/sbin/ssh systemctl status sshd 生成 ed25519 密钥对 1 2 ssh-keygen -t ed25519 -C \u0026#34;your_email@example.com\u0026#34; -f ~/.ssh/github_ed25519 -N \u0026#34;\u0026#34; # ~/.ssh 如果不存在会自动创建；-N 参数设置 passphrase 为空 添加到 SSH agent 1 2 eval \u0026#34;$(ssh-agent -s)\u0026#34; # 启动 SSH Agent（后台进程） ssh-add ~/.ssh/github_ed25519 # 把 SSH 私钥添加进 SSH agent，让系统记住它 测试 SSH 连接 1 2 ssh-add -l # 检查本地 SSH key ssh -T git@github.com # 测试 SSH 连接 ","permalink":"https://ninjatypeman.github.io/posts/ssh-note/","summary":"SSH 相关笔记","title":"SSH (Secure Shell)"},{"content":"Focus on what matters instead of fighting with Git.\nConfig 1 2 3 4 5 6 7 8 9 10 git config -l # 查看配置 git config --global --list # 查看全局配置 git init # 初始化仓库 git config user.name \u0026#34;Your Name\u0026#34; # 设置用户名 git config user.email \u0026#34;email@example.com\u0026#34; # 设置邮箱 git remote add origin https://github.com/username/repo-name.git # 添加远程源 git pull --rebase # 临时 rebase git add . git commit -m \u0026#34;comment\u0026#34; # Stage Commit git push -u origin main # 第一次 push Branch 1 2 3 4 5 6 7 8 9 10 11 12 # 创建分支，两条命令等价 git checkout -b branch-a git switch -c branch-a # Add \u0026amp; Commit git status git add . git commit -m \u0026#34;comment\u0026#34; # push 分支到远程 git push origin branch-a # 切换分支 git checkout main git switch main Merge 团队协作，需要记录谁在哪个分支干了什么。 不太关注提交历史是否线性清爽。 小团队或时间紧，不需要提前整理提交。 1 2 3 4 5 git switch main # 切换到主分支 git pull origin main # 更新主分支 git merge origin/branch-a # 合并分支 # 解决冲突 \u0026amp; 测试通过后 git push origin main # 推送合并结果 Rebase 保持提交历史线性，避免不必要的 merge commit 减少合并冲突的复杂度（因为已经提前处理过了） 1 2 3 4 5 6 git switch branch-a git rebase main # 如果提示 “Current branch branch-a is up to date.”，则继续下一步 # 解决冲突、测试后 git switch main git merge feature/branch-a git push origin main 多个 GitHub 账户 编辑 ~/.ssh/config\n1 2 3 4 5 6 7 8 9 10 11 # 账号A配置 Host gh-tom # 别名，可以设置为用户名方便配置、避免混淆 HostName github.com User git IdentityFile ~/.ssh/id_rsa_tom # 指定私钥 # 账号B配置 Host gh-jerry HostName github.com User git IdentityFile ~/.ssh/id_rsa_jerry 在各自的仓库修改远程地址：\n1 2 3 # username 替换为真实的 GitHub 用户名 git remote set-url origin git@gh-tom:\u0026lt;username\u0026gt;/repo-name.git git remote set-url origin git@gh-jerry:\u0026lt;username\u0026gt;/repo-name.git Others 修改远程仓库名后，本地更新 URL\n1 git remote set-url origin https://github.com/new-username/repo.git ","permalink":"https://ninjatypeman.github.io/posts/git-note/","summary":"Git 相关笔记","title":"Git \u0026 GitHub"},{"content":"安装 Samba 1 sudo dnf install samba samba-client samba-common 创建共享文件夹 1 2 mkdir -p ~/Shared chmod 777 ~/Shared # 赋权 配置共享文件夹 追加内容到 /etc/samba/smb.conf\n1 2 3 4 5 6 7 8 9 10 sudo bash -c \u0026#39;cat \u0026gt;\u0026gt; /etc/samba/smb.conf \u0026lt;\u0026lt;EOF [Shared] path = /home/YOUR_USERNAME/Shared writable = yes browseable = yes guest ok = no create mask = 0666 directory mask = 0777 force user = YOUR_USERNAME EOF\u0026#39; 添加 Samba 用户 需确保这个用户在系统中存在\n1 sudo smbpasswd -a YOUR_USERNAME 配置防火墙 配置防火墙放行 Samba 服务\n1 2 3 sudo firewall-cmd --permanent --add-service=samba sudo firewall-cmd --reload sudo firewall-cmd --list-all 配置 SELinux 配置 SELinux 支持 Samba 访问 home 目录\n1 2 sudo setsebool -P samba_enable_home_dirs on sudo chcon -t samba_share_t ~/Shared -R 配置开机启动 立即启动、开机自启动\n1 2 sudo systemctl enable --now smb nmb sudo systemctl status smb nmb 连接 1 smb://192.168.XXX.XXX/Shared ","permalink":"https://ninjatypeman.github.io/posts/samba-linux/","summary":"Fedora (Workstation) 上配置 Samba 实现局域网文件共享","title":"Fedora 上使用 Samba"},{"content":"安装 Fcitx 5 安装 Fcitx 5 主程序和一些相关的模块，参考 I18N/Fcitx5\n1 2 sudo dnf install fcitx5 fcitx5-chinese-addons fcitx5-configtool fcitx5-rime fcitx5-qt fcitx5-gtk fcitx5-autostart.noarch sudo dnf remove \u0026#34;fcitx5*\u0026#34; # 这是卸载命令 下载词库 雾凇拼音——长期维护的简体词库\n1 2 3 4 5 6 # 创建文件夹（如果不存在） mkdir -p ~/.local/share/fcitx5/rime/ # 克隆雾凇拼音这个Rime配置到本地（我克隆到了 ~/Downloads 目录） git clone https://github.com/iDvel/rime-ice.git rime --depth 1 # 复制上面克隆到本地的文件夹内的所有文件到刚创建的文件夹 cp ~/Downloads/rime/* ~/.local/share/fcitx5/rime 简单配置 通过快捷键选择输入方案\n修改每页候选词个数\n编辑 ~/.local/share/fcitx5/rime/default.yaml 文件，修改 page_size 这行：\n1 2 # ~/.local/share/fcitx5/rime/default.yaml page_size: 9 隐藏拼音注释 候选框默认会显示拼音注释，比如：你好[ni hao]，我使用小鹤双拼，所以编辑 ~/.local/share/fcitx5/rime/double_pinyin_flypy.schema.yaml，注释下面这两行：\n1 2 3 # ~/.local/share/fcitx5/rime/double_pinyin_flypy.schema.yaml spelling_hints: 8 always_show_comments: true 添加 Rime 打开 Fcitx5 Configuration 这个图形化工具添加 Rime\n环境变量 编辑 ~/.bash_profile，添加下面三行：\n1 2 3 export GTK_IM_MODULE=fcitx export QT_IM_MODULE=fcitx export XMODIFIERS=@im=fcitx 重新加载配置 通过 Gnome Tweaks 设置开机启动，重新登录或者重启，然后打字测试\nGnome 扩展 安装 Input Method Panel 扩展以实现 UI 统一、托盘显示输入法图标、调整候选词字号等 🔚\n","permalink":"https://ninjatypeman.github.io/posts/fcitx5-fedora/","summary":"Fedora (Workstation) 上安装 Fcitx 5 框架并配置中文输入法","title":"Fedora 安装中文输入法（Fcitx 5）"},{"content":"之前一直用 Hexo 发博客，生成速度确实感人，最近研究了一下常见的几个静态网站生成器，最终选择了 Hugo，以下是 Hugo 博客搭建和通过 GitHub Pages + GitHub Actions （使用 Deploy key 而不是 PAT）实现自动部署的具体步骤\n前置条件 🔧 Git，GitHub 账户，VS Code\n本地部署 这里在 Fedora Linux 上做本地部署，其他操作系统上的步骤大同小异\n▶️ 首先使用内置的包管理器搜索 hugo 查看是否是最新版本（dnf 是 Fedora 内置的包管理器），是则通过dnf install hugo命令安装，否则到 GitHub 下载最新版本 hugo\n1 dnf info hugo # 或者：dnf repoquery hugo dnf 搜索的版本对比 GitHub 上的版本，GitHub 的版本更新，所以我在 GitHub 下载，又因为后面会通过 GitHub Pages 部署，所以选择文件名不带 “withdeploy” 的版本，通过命令解压：\n1 tar -xzvf hugo_extended_x.xxx.x_linux-amd64.tar.gz 解压后把 hugo 这个文件移动到 /usr/local/bin 目录：\n1 sudo mv hugo /usr/local/bin 查看 Hugo 版本：\n1 hugo version 创建、进入博客文件夹：\n1 2 hugo new site hugo-blog # 自己起一个文件夹名 cd hugo-blog 初始化仓库：\n1 git init 通过 touch .gitignore 命令新建 .gitignore 文件，复制下面的内容添加进去（用来忽略不必要的文件和文件夹）：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 /public resources/_gen/ .hugo_build.lock # Compiled Object files, Static and Dynamic libs (Shared Objects) *.o *.a *.so # Folders _obj _test # Architecture specific extensions/prefixes *.[568vq] [568vq].out *.cgo1.go *.cgo2.c _cgo_defun.c _cgo_gotypes.go _cgo_export.* _testmain.go *.exe *.test .DS_Store 在 Hugo Themes 找自己喜欢的主题，以 PaperMod 为例，它支持多种安装方式，这里通过 submodule 的方式安装：\n1 2 3 4 5 git submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod # needed when you reclone your repo (submodules may not get cloned automatically) git submodule update --init --recursive # update git submodule update --remote --merge 应用主题：\n1 echo \u0026#34;theme = \u0026#39;PaperMod\u0026#39;\u0026#34; \u0026gt;\u0026gt; hugo.toml 新建一篇文章：\n1 hugo new content ./content/posts/my-first-post.md 启动本地服务器（新建的文章默认是草稿，-D参数表示构建草稿内容）：\n1 hugo server -D 部署到 GitHub Pages 📦 创建一个 Public 仓库，仓库名为 \u0026lt;username\u0026gt;.github.io，创建的时候添加一个 README.md 文件（也可以创建好之后添加，总之不是空仓库就行，否则会影响后面的工作流），然后把本地博客目录的 hugo.toml 这个配置文件的 baseURL 这行后面的链接改为 https://username.github.io/（注意替换 username）\n📦 再创建一个 Private 仓库，用来保存博客源码，不需要添加任何文件，名字自己起\n🔑 生成一个 ed25519 类型的 SHH 密钥对，用于连接远程仓库：\n1 2 ssh-keygen -t ed25519 -C \u0026#34;your_email@example.com\u0026#34; -f ~/.ssh/github_ed25519 -N \u0026#34;\u0026#34; # ~/.ssh 如果不存在会自动创建；-N 参数设置 passphrase 为空 把 SSH 私钥添加进 SSH agent：\n1 2 eval \u0026#34;$(ssh-agent -s)\u0026#34; ssh-add ~/.ssh/github_ed25519 ➡️ 复制 .pub 的内容，来到 GitHub，点击头像，点 Settings \u0026gt; SSH and GPG Keys \u0026gt; New SSH key，填写 Title，Key type 保持默认 Authenticaiton Key，粘贴到 Key 的区域，点击Add SSH key\n然后在博客根目录下测试连接：\n1 2 ssh-add -l # 检查本地 SSH key ssh -T git@github.com # 测试 SSH 连接 🔑 同样在 ~/.ssh 再生成一个 ed25519 密钥对：\n1 ssh-keygen -t ed25519 -C \u0026#34;hugo-deploy-key\u0026#34; -f ~/.ssh/hugo_deploy_key -N \u0026#34;\u0026#34; 第二个生成之后不需要把私钥添加进 SSH agent\n➡️ 复制 .pub 的内容，到刚创建的 Public 仓库，点击 Settings \u0026gt; Deploy keys \u0026gt; Add deploy key，粘贴到 “Key” 下面的输入框，起一个 Title，比如：hugo-deploy-key，勾选“Allow write access”，最后点击“Add key”\n➡️ 复制私钥的内容（没有扩展名的文件），到到 Private 仓库的 Settings \u0026gt; Secrets and variables \u0026gt; Actions \u0026gt; New repository secret，粘贴到 Secret 下面的输入框，起一个 Name，比如：HUGO_DEPLOY_SECRET，最后点击 Add secret\n⚠️ 私钥要复制包括头尾两行的全部内容，粘贴的时候**后面多加一个空行**\n创建 GitHub Actions 工作流文件：\n1 2 mkdir -p .github/workflows touch .github/workflows/hugo.yaml 编辑 hugo.yaml，把下面内容粘贴进去（注意替换自己的信息）：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 name: Deploy to Public Repo on: push: branches: - main jobs: deploy: runs-on: ubuntu-latest steps: # Set timezone - name: Set timezone run: | sudo timedatectl set-timezone Asia/Shanghai # Checkout - name: Checkout private repo uses: actions/checkout@v4 with: submodules: recursive # fetch-depth: 0 # SSH - name: Setup SSH uses: webfactory/ssh-agent@v0.9.1 with: ssh-private-key: ${{ secrets.HUGO_DEPLOY_KEY }} # Set up Hugo - name: Set up Hugo uses: peaceiris/actions-hugo@v3 with: hugo-version: \u0026#34;0.145.0\u0026#34; # 填你的hugo版本 # Build - name: Build Hugo site run: hugo # Deploy to the public repo via SSH - name: Deploy to public repository run: | rm -rf deploy-repo git clone --single-branch --branch main git@github.com:\u0026lt;username\u0026gt;/\u0026lt;username\u0026gt;.github.io.git deploy-repo cd deploy-repo rm -rf * cp -r ../public/* . git config user.email \u0026#34;example@gmail.com\u0026#34; git config user.name \u0026#34;username\u0026#34; git add . git commit -m \u0026#34;Auto deploy Hugo site $(date \u0026#39;+%Y-%m-%d %H:%M:%S\u0026#39;)\u0026#34; git push origin main 配置用户名和邮箱：\n1 2 3 4 5 # 注意替换自己的信息 git config user.email “example@gmail.com” git config user.name \u0026#34;username\u0026#34; # 默认使用main分支 git config --global init.defaultBranch main 关联 Private 仓库：\n1 2 # 查看配置 git remote add origin git@github.com:username/hugo-source-code.git Add, Commit, Push 三步走：\n1 2 3 git add . git commit -m \u0026#34;First commit\u0026#34; git push -u origin main 最后到 Private 仓库的 Actions 界面看工作流是否 run 成功，成功之后在浏览器打开 username.github.io 即可查看博客页面 🔚\n参考 Hugo， PaperMod\n","permalink":"https://ninjatypeman.github.io/posts/hugo-deploy/","summary":"GitHub Pages + GitHub Actions 自动部署 Hugo + PaperMod 博客","title":"Hugo 博客搭建和部署"}]